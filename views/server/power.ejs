<%- include('../components/top') %>
<main class="flex-grow container mx-auto px-4 py-8">
    <div class="mb-5 lg:flex lg:items-center lg:justify-between">
        <div class="min-w-0 flex-1">
          <h2 class="text-2xl font-bold leading-7 text-white sm:truncate sm:text-3xl sm:tracking-tight" id="server-name">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </h2>
          <div class="mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap sm:space-x-6">
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path fill-rule="evenodd" d="M7.502 6h7.128A3.375 3.375 0 0 1 18 9.375v9.375a3 3 0 0 0 3-3V6.108c0-1.505-1.125-2.811-2.664-2.94a48.972 48.972 0 0 0-.673-.05A3 3 0 0 0 15 1.5h-1.5a3 3 0 0 0-2.663 1.618c-.225.015-.45.032-.673.05C8.662 3.295 7.554 4.542 7.502 6ZM13.5 3A1.5 1.5 0 0 0 12 4.5h4.5A1.5 1.5 0 0 0 15 3h-1.5Z" clip-rule="evenodd" />
                <path fill-rule="evenodd" d="M3 9.375C3 8.339 3.84 7.5 4.875 7.5h9.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 0 1 3 20.625V9.375Zm9.586 4.594a.75.75 0 0 0-1.172-.938l-2.476 3.096-.908-.907a.75.75 0 0 0-1.06 1.06l1.5 1.5a.75.75 0 0 0 1.116-.062l3-3.75Z" clip-rule="evenodd" />
              </svg>                    
              <span id="server-description">
                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path d="M4.08 5.227A3 3 0 0 1 6.979 3H17.02a3 3 0 0 1 2.9 2.227l2.113 7.926A5.228 5.228 0 0 0 18.75 12H5.25a5.228 5.228 0 0 0-3.284 1.153L4.08 5.227Z" />
                <path fill-rule="evenodd" d="M5.25 13.5a3.75 3.75 0 1 0 0 7.5h13.5a3.75 3.75 0 1 0 0-7.5H5.25Zm10.5 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm3.75-.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" clip-rule="evenodd" />
              </svg>              
              Server <%= req.query.id %>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path fill-rule="evenodd" d="M12.516 2.17a.75.75 0 0 0-1.032 0 11.209 11.209 0 0 1-7.877 3.08.75.75 0 0 0-.722.515A12.74 12.74 0 0 0 2.25 9.75c0 5.942 4.064 10.933 9.563 12.348a.749.749 0 0 0 .374 0c5.499-1.415 9.563-6.406 9.563-12.348 0-1.39-.223-2.73-.635-3.985a.75.75 0 0 0-.722-.516l-.143.001c-2.996 0-5.717-1.17-7.734-3.08Zm3.094 8.016a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
              </svg>              
              Status: <span id="server-status" class="ml-1">Connecting...</span>
            </div>
          </div>
        </div>
        <div class="mt-5 flex lg:mt-0 lg:ml-4">
          <span class="hidden sm:block">
            <a href="/servers" class="inline-flex items-center rounded-xl border border-transparent bg-indigo-900/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-900 transition focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-indigo-800">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="-ml-1 mr-2 h-5 w-5 text-indigo-200">
                <path fill-rule="evenodd" d="M9.53 2.47a.75.75 0 0 1 0 1.06L4.81 8.25H15a6.75 6.75 0 0 1 0 13.5h-3a.75.75 0 0 1 0-1.5h3a5.25 5.25 0 1 0 0-10.5H4.81l4.72 4.72a.75.75 0 1 1-1.06 1.06l-6-6a.75.75 0 0 1 0-1.06l6-6a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
              </svg>                
              Back to server list
            </a>
          </span>
        </div>
    </div>

<%- include('../components/server') %>

    <!-- Alert Container -->
    <div id="alert-container" class="space-y-4"></div>

    <!-- Power Actions Panel -->
    <div class="mt-6">
        <h3 class="text-lg font-medium text-white mb-4">Power Actions</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 w-1/2 lg:grid-cols-4 gap-4">
            <button onclick="sendPowerAction('start')" id="start-btn" class="inline-flex items-center justify-center rounded-xl border border-transparent bg-green-600/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-green-700 transition focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm14.024-.983a1.125 1.125 0 010 1.966l-5.603 3.113A1.125 1.125 0 019 15.113V8.887c0-.857.921-1.4 1.671-.983l5.603 3.113z" clip-rule="evenodd" />
                </svg>
                Start
            </button>
            <button onclick="sendPowerAction('restart')" id="restart-btn" class="inline-flex items-center justify-center rounded-xl border border-transparent bg-blue-600/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.755 10.059a7.5 7.5 0 0112.548-3.364l1.903 1.903h-3.183a.75.75 0 100 1.5h4.992a.75.75 0 00.75-.75V4.356a.75.75 0 00-1.5 0v3.18l-1.9-1.9A9 9 0 003.306 9.67a.75.75 0 101.45.388zm15.408 3.352a.75.75 0 00-.919.53 7.5 7.5 0 01-12.548 3.364l-1.902-1.903h3.183a.75.75 0 000-1.5H2.984a.75.75 0 00-.75.75v4.992a.75.75 0 001.5 0v-3.18l1.9 1.9a9 9 0 0015.059-4.035.75.75 0 00-.53-.918z" clip-rule="evenodd" />
                </svg>
                Reboot
            </button>
            <button onclick="sendPowerAction('stop')" id="stop-btn" class="inline-flex items-center justify-center rounded-xl border border-transparent bg-yellow-600/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-yellow-700 transition focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 focus:ring-offset-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm6-2.438c0-.724.588-1.312 1.313-1.312h4.874c.725 0 1.313.588 1.313 1.313v4.874c0 .725-.588 1.313-1.313 1.313H9.564c-.725 0-1.313-.588-1.313-1.313V9.564z" clip-rule="evenodd" />
                </svg>
                Power off
            </button>
            <button onclick="sendPowerAction('kill')" id="kill-btn" class="inline-flex items-center justify-center rounded-xl border border-transparent bg-red-600/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 transition focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
<path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm-1.72 6.97a.75.75 0 10-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 101.06 1.06L12 13.06l1.72 1.72a.75.75 0 101.06-1.06L13.06 12l1.72-1.72a.75.75 0 10-1.06-1.06L12 10.94l-1.72-1.72z" clip-rule="evenodd" />
                </svg>
                Force kill
            </button>
        </div>
    </div>
</main>

<script>
    const serverId = new URLSearchParams(window.location.search).get('id');
    let socket = null;
    const maxRetries = 3;
    let retryCount = 0;
    const retryDelay = 5000;

    // Show alert function
    function showAlert(type, title, message) {
        const alertContainer = document.getElementById('alert-container');
        
        // Remove existing connection alerts if this is a new connection alert
        if (message.includes('Attempting to reconnect')) {
            const existingAlert = alertContainer.querySelector('.connection-alert');
            if (existingAlert) {
                alertContainer.removeChild(existingAlert);
            }
        }

        const colors = {
            success: 'green',
            warning: 'yellow',
            error: 'red'
        };

        const alert = document.createElement('div');
        alert.className = `rounded-xl bg-${colors[type]}-900/50 p-4 connection-alert`;
        alert.innerHTML = `
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    ${type === 'success' ? `
                        <svg class="h-5 w-5 text-${colors[type]}-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                    ` : type === 'warning' ? `
                        <svg class="h-5 w-5 text-${colors[type]}-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>
                    ` : `
                        <svg class="h-5 w-5 text-${colors[type]}-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                    `}
                </div>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-${colors[type]}-800">${title}</h3>
                    <div class="mt-1 text-sm text-${colors[type]}-700">${message}</div>
                </div>
            </div>
        `;

        alertContainer.appendChild(alert);

        // Remove alert after 5 seconds unless it's an error
        if (type !== 'error') {
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            }, 5000);
        }
    }

    function updateStatus(status) {
        const statusElement = document.getElementById('server-status');
        const statusText = status.charAt(0).toUpperCase() + status.slice(1);
        statusElement.textContent = statusText;
        
        // Update button states based on server status
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
        const restartBtn = document.getElementById('restart-btn');
        const killBtn = document.getElementById('kill-btn');
        
        switch(status) {
            case 'offline':
                startBtn.disabled = false;
                stopBtn.disabled = true;
                restartBtn.disabled = true;
                killBtn.disabled = true;
                break;
            case 'running':
                startBtn.disabled = true;
                stopBtn.disabled = false;
                restartBtn.disabled = false;
                killBtn.disabled = false;
                break;
            case 'starting':
            case 'stopping':
                startBtn.disabled = true;
                stopBtn.disabled = true;
                restartBtn.disabled = true;
                killBtn.disabled = true;
                break;
        }
        
        // Update button opacity for disabled state
        [startBtn, stopBtn, restartBtn, killBtn].forEach(btn => {
            if (btn.disabled) {
                btn.classList.add('opacity-50', 'cursor-not-allowed');
            } else {
                btn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        });
    }

    function handleWebSocketMessage(event) {
        try {
            const data = JSON.parse(event.data);
            
            if (data.event === 'status') {
                updateStatus(data.args[0]);
            } else if (data.event === 'error') {
                showAlert('error', 'Error', data.args[0]);
            }
        } catch (error) {
            console.error('Error handling WebSocket message:', error);
        }
    }

    function sendPowerAction(action) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                event: 'set state',
                args: [action]
            }));
        } else {
            showAlert('error', 'Connection Error', 'WebSocket connection is not available.');
        }
    }

    function connectWebSocket() {
        fetch(`/api/server/${serverId}/websocket`)
            .then(response => response.json())
            .then(data => {
                socket = new WebSocket(data.data.socket);
                socket.onopen = () => {
                    console.log('WebSocket connected');
                    retryCount = 0;
                    socket.send(JSON.stringify({ event: 'auth', args: [data.data.token] }));
                    const alertContainer = document.getElementById('alert-container');
                    const connectionAlert = alertContainer.querySelector('.connection-alert');
                    if (connectionAlert) {
                        alertContainer.removeChild(connectionAlert);
                    }
                };
                socket.onclose = (event) => {
                    console.log('WebSocket disconnected');
                    if (retryCount < maxRetries) {
                        retryCount++;
                        showAlert('warning', 'Connection Lost', `Attempting to reconnect... (${retryCount}/${maxRetries})`);
                        setTimeout(connectWebSocket, retryDelay);
                    } else {
                        showAlert('error', 'Connection Failed', 'Unable to connect after multiple attempts. Please refresh the page.');
                    }
                };
                socket.onerror = (error) => {
                    console.error('WebSocket error:', error);
                };
                socket.onmessage = handleWebSocketMessage;
            })
            .catch(error => {
                console.error('Error fetching WebSocket credentials:', error);
                showAlert('error', 'Connection Error', 'Failed to establish connection. Please try refreshing the page.');
            });
    }

    // Load server details
    fetch(`/api/server/${serverId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('server-name').textContent = data.attributes.name;
            document.getElementById('server-description').textContent = data.attributes.description || "No description set.";
        });

    // Initialize WebSocket connection
    connectWebSocket();
</script>

<%- include('../components/bottom') %>