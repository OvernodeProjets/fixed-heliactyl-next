<%- include('../components/top') %>
<main class="flex-grow container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="mb-5 lg:flex lg:items-center lg:justify-between">
        <div class="min-w-0 flex-1">
            <h2 class="text-2xl font-bold leading-7 text-white sm:truncate sm:text-3xl sm:tracking-tight" id="server-name">
                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </h2>
            <div class="mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap sm:space-x-6">
                <div class="mt-2 flex items-center text-sm text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                        <path fill-rule="evenodd" d="M7.502 6h7.128A3.375 3.375 0 0 1 18 9.375v9.375a3 3 0 0 0 3-3V6.108c0-1.505-1.125-2.811-2.664-2.94a48.972 48.972 0 0 0-.673-.05A3 3 0 0 0 15 1.5h-1.5a3 3 0 0 0-2.663 1.618c-.225.015-.45.032-.673.05C8.662 3.295 7.554 4.542 7.502 6ZM13.5 3A1.5 1.5 0 0 0 12 4.5h4.5A1.5 1.5 0 0 0 15 3h-1.5Z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M3 9.375C3 8.339 3.84 7.5 4.875 7.5h9.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 0 1 3 20.625V9.375Zm9.586 4.594a.75.75 0 0 0-1.172-.938l-2.476 3.096-.908-.907a.75.75 0 0 0-1.06 1.06l1.5 1.5a.75.75 0 0 0 1.116-.062l3-3.75Z" clip-rule="evenodd" />
                    </svg>
                    <span id="server-description">
                        <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </div>
                <div class="mt-2 flex items-center text-sm text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                        <path d="M4.08 5.227A3 3 0 0 1 6.979 3H17.02a3 3 0 0 1 2.9 2.227l2.113 7.926A5.228 5.228 0 0 0 18.75 12H5.25a5.228 5.228 0 0 0-3.284 1.153L4.08 5.227Z" />
                        <path fill-rule="evenodd" d="M5.25 13.5a3.75 3.75 0 1 0 0 7.5h13.5a3.75 3.75 0 1 0 0-7.5H5.25Zm10.5 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm3.75-.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" clip-rule="evenodd" />
                    </svg>
                    Server <%= req.query.id %>
                </div>
                <div class="mt-2 flex items-center text-sm text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                        <path fill-rule="evenodd" d="M12.516 2.17a.75.75 0 0 0-1.032 0 11.209 11.209 0 0 1-7.877 3.08.75.75 0 0 0-.722.515A12.74 12.74 0 0 0 2.25 9.75c0 5.942 4.064 10.933 9.563 12.348a.749.749 0 0 0 .374 0c5.499-1.415 9.563-6.406 9.563-12.348 0-1.39-.223-2.73-.635-3.985a.75.75 0 0 0-.722-.516l-.143.001c-2.996 0-5.717-1.17-7.734-3.08Zm3.094 8.016a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
                    </svg>
                    Volumetric Shield enabled
                </div>
            </div>
        </div>
        <div class="mt-5 flex lg:mt-0 lg:ml-4">
            <span class="hidden sm:block">
                <a href="/servers" class="inline-flex items-center rounded-xl border border-transparent bg-indigo-900/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-900 transition focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-indigo-800">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="-ml-1 mr-2 h-5 w-5 text-indigo-200">
                        <path fill-rule="evenodd" d="M9.53 2.47a.75.75 0 0 1 0 1.06L4.81 8.25H15a6.75 6.75 0 0 1 0 13.5h-3a.75.75 0 0 1 0-1.5h3a5.25 5.25 0 1 0 0-10.5H4.81l4.72 4.72a.75.75 0 1 1-1.06 1.06l-6-6a.75.75 0 0 1 0-1.06l6-6a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
                    </svg>
                    Back to server list
                </a>
            </span>
        </div>
    </div>
<div id="alert-container" class="mb-4 space-y-2"></div>
    <%- include('../components/server') %>

    <!-- Metrics Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8">
        <!-- CPU Usage -->
        <div class="bg-white/5 rounded-xl p-6">
            <h3 class="text-gray-400 text-sm font-medium">CPU Usage</h3>
            <div class="mt-2 flex items-baseline">
                <p class="text-2xl font-semibold text-white" id="cpu-usage">0%</p>
                <p class="ml-2 text-sm text-gray-400" id="cpu-trend"></p>
            </div>
            <div class="mt-3 h-[60px]">
                <canvas id="cpu-chart"></canvas>
            </div>
        </div>

        <!-- Memory Usage -->
        <div class="bg-white/5 rounded-xl p-6">
            <h3 class="text-gray-400 text-sm font-medium">Memory Usage</h3>
            <div class="mt-2 flex items-baseline">
                <p class="text-2xl font-semibold text-white" id="memory-usage">0 MB</p>
                <p class="ml-2 text-sm text-gray-400" id="memory-total"></p>
            </div>
            <div class="mt-3 h-[60px]">
                <canvas id="memory-chart"></canvas>
            </div>
        </div>

        <!-- Network Traffic -->
        <div class="bg-white/5 rounded-xl p-6">
            <h3 class="text-gray-400 text-sm font-medium">Network Traffic</h3>
            <div class="mt-2 flex items-baseline">
                <p class="text-2xl font-semibold text-white" id="network-usage">0 B/s</p>
                <p class="ml-2 text-sm text-gray-400 hidden" id="network-trend"></p>
            </div>
            <div class="mt-3 h-[60px]">
                <canvas id="network-chart"></canvas>
            </div>
        </div>

        <!-- Disk Usage -->
        <div class="bg-white/5 rounded-xl p-6">
            <h3 class="text-gray-400 text-sm font-medium">Disk Usage</h3>
            <div class="mt-2 flex items-baseline">
                <p class="text-2xl font-semibold text-white" id="disk-usage">0 MB</p>
                <p class="ml-2 text-sm text-gray-400 hidden" id="disk-total"></p>
            </div>
            <div class="mt-3 h-[60px]">
                <canvas id="disk-chart"></canvas>
            </div>
        </div>
    </div>

    <!-- Detailed Charts -->
    <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">
        <div class="bg-white/5 rounded-xl p-6">
            <h2 class="text-lg font-medium text-white mb-4">Resource Usage</h2>
            <div class="h-[240px]">
                <canvas id="resource-chart"></canvas>
            </div>
        </div>
        <div class="bg-white/5 rounded-xl p-6">
            <h2 class="text-lg font-medium text-white mb-4">Network Activity</h2>
            <div class="h-[240px]">
                <canvas id="network-detail-chart"></canvas>
            </div>
        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1/build/global/luxon.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0"></script>

<script>
let serverId = '<%- req.query.id %>'
// Configuration and utilities
const MAX_HISTORY = 150;
let socket;
let startTime = Date.now();
let lastStats = null;

// Chart defaults
Chart.defaults.color = '#9CA3AF';
Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';
Chart.defaults.elements.line.borderWidth = 2;
Chart.defaults.elements.point.radius = 0;

// Data structures for metrics history
const metricsHistory = {
    cpu: new Array(MAX_HISTORY).fill(0),
    memory: new Array(MAX_HISTORY).fill(0),
    network: new Array(MAX_HISTORY).fill(0),
    disk: new Array(MAX_HISTORY).fill(0)
};

// Utility functions
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}

// Create mini chart
function createMiniChart(elementId, color) {
    return new Chart(document.getElementById(elementId), {
        type: 'line',
        data: {
            labels: new Array(MAX_HISTORY).fill(''),
            datasets: [{
                data: new Array(MAX_HISTORY).fill(0),
                borderColor: color,
                backgroundColor: color.replace(')', ', 0.1)'),
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
            scales: {
                x: { display: false },
                y: { display: false, min: 0 }
            },
            animation: false
        }
    });
}

const charts = {
    cpu: createMiniChart('cpu-chart', 'rgb(129, 140, 248)'),
    memory: createMiniChart('memory-chart', 'rgb(52, 211, 153)'),
    network: createMiniChart('network-chart', 'rgb(59, 130, 246)'),
    disk: createMiniChart('disk-chart', 'rgb(167, 139, 250)'),
    resource: new Chart(document.getElementById('resource-chart'), {
        type: 'line',
        data: {
            datasets: [{
                label: 'CPU',
                data: [],
                borderColor: 'rgb(129, 140, 248)',
                backgroundColor: 'rgba(129, 140, 248, 0.1)',
                fill: true
            }, {
                label: 'Memory',
                data: [],
                borderColor: 'rgb(52, 211, 153)',
                backgroundColor: 'rgba(52, 211, 153, 0.1)',
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'linear',  // Changed from 'time' to 'linear'
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                        callback: value => `${value}%`
                    }
                }
            },
            animation: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        boxWidth: 6
                    }
                }
            }
        }
    }),
    networkDetail: new Chart(document.getElementById('network-detail-chart'), {
        type: 'line',
        data: {
            datasets: [{
                label: 'Inbound',
                data: [],
                borderColor: 'rgb(59, 130, 246)',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                fill: true
            }, {
                label: 'Outbound',
                data: [],
                borderColor: 'rgb(239, 68, 68)',
                backgroundColor: 'rgba(239, 68, 68, 0.1)',
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'linear',  // Changed from 'time' to 'linear'
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: value => formatBytes(value) + '/s'
                    }
                }
            },
            animation: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        boxWidth: 6
                    }
                }
            }
        }
    })
};

// Modify the updateMetrics function to use simple indices instead of timestamps
let dataIndex = 0;

function updateMetrics(stats) {
    // Update CPU
    document.getElementById('cpu-usage').textContent = `${stats.cpu_absolute.toFixed(1)}%`;
    metricsHistory.cpu.push(stats.cpu_absolute);
    metricsHistory.cpu.shift();
    charts.cpu.data.datasets[0].data = [...metricsHistory.cpu];
    charts.cpu.update();

    // Update Memory
    const memoryPercentage = (stats.memory_bytes / stats.memory_limit_bytes) * 100;
    document.getElementById('memory-usage').textContent = formatBytes(stats.memory_bytes);
    document.getElementById('memory-total').textContent = `/ ${formatBytes(stats.memory_limit_bytes)}`;
    metricsHistory.memory.push(memoryPercentage);
    metricsHistory.memory.shift();
    charts.memory.data.datasets[0].data = [...metricsHistory.memory];
    charts.memory.update();

    // Update Network
    document.getElementById('network-usage').textContent = `${formatBytes(stats.network.tx_bytes)}/s`;
    document.getElementById('network-trend').textContent = `↓ ${formatBytes(stats.network.rx_bytes)}/s`;
    metricsHistory.network.push(stats.network.tx_bytes);
    metricsHistory.network.shift();
    charts.network.data.datasets[0].data = [...metricsHistory.network];
    charts.network.update();

    // Update Disk
    const diskPercentage = (stats.disk_bytes / stats.disk_limit_bytes) * 100;
    document.getElementById('disk-usage').textContent = formatBytes(stats.disk_bytes);
    document.getElementById('disk-total').textContent = `/ ${formatBytes(stats.disk_limit_bytes)}`;
    metricsHistory.disk.push(diskPercentage);
    metricsHistory.disk.shift();
    charts.disk.data.datasets[0].data = [...metricsHistory.disk];
    charts.disk.update();

    // Update detailed charts with simple indices
    charts.resource.data.datasets[0].data.push({
        x: dataIndex,
        y: stats.cpu_absolute
    });
    charts.resource.data.datasets[1].data.push({
        x: dataIndex,
        y: memoryPercentage
    });

    charts.networkDetail.data.datasets[0].data.push({
        x: dataIndex,
        y: stats.network.rx_bytes
    });
    charts.networkDetail.data.datasets[1].data.push({
        x: dataIndex,
        y: stats.network.tx_bytes
    });

    // Remove old data points if we exceed MAX_HISTORY
    if (charts.resource.data.datasets[0].data.length > MAX_HISTORY) {
        charts.resource.data.datasets.forEach(dataset => {
            dataset.data.shift();
        });
        charts.networkDetail.data.datasets.forEach(dataset => {
            dataset.data.shift();
        });
    }

    dataIndex++;
    charts.resource.update();
    charts.networkDetail.update();
}

// WebSocket connection
function connectWebSocket() {
    fetch(`/api/server/${serverId}/websocket`)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'suspended') {
                return;
            }
            socket = new WebSocket(data.data.socket);

            socket.onopen = () => {
                console.log('WebSocket connected');
                socket.send(JSON.stringify({ 
                    event: 'auth', 
                    args: [data.data.token] 
                }));
            };

            socket.onmessage = (event) => {
                const message = JSON.parse(event.data);

                switch (message.event) {
                    case 'auth success':
                        socket.send(JSON.stringify({ 
                            event: 'send stats', 
                            args: [null] 
                        }));
                        break;

                    case 'stats':
                        const stats = JSON.parse(message.args[0]);
                        updateMetrics(stats);
                        break;

                    case 'token expiring':
                        fetch(`/api/server/${serverId}/websocket`)
                            .then(response => response.json())
                            .then(data => {
                                socket.send(JSON.stringify({
                                    event: 'auth',
                                    args: [data.data.token]
                                }));
                            });
                        break;
                }
            };

            socket.onclose = () => {
                setTimeout(connectWebSocket, 5000);
            };
        })
        .catch(error => {
            console.error('Error fetching WebSocket credentials:', error);
            setTimeout(connectWebSocket, 5000);
        });
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    // Load server details
    fetch(`/api/server/${serverId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('server-name').textContent = data.attributes.name;
            document.getElementById('server-description').textContent = 
                data.attributes.description || 'No description set.';
        });

    // Connect WebSocket
    connectWebSocket();

    // Request stats periodically
    setInterval(() => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ 
                event: 'send stats', 
                args: [null] 
            }));
        }
    }, 1000);
});
</script>
<%- include('../components/bottom') %>