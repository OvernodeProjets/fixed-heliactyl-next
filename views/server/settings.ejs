<%- include('../components/top') %>
<main class="flex-grow container mx-auto px-4 py-8">
    <div class="mb-5 lg:flex lg:items-center lg:justify-between">
        <div class="min-w-0 flex-1">
          <h2 class="text-2xl font-bold leading-7 text-white sm:truncate sm:text-3xl sm:tracking-tight" id="server-name"><svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg></h2>
          <div class="mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap sm:space-x-6">
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <!-- Heroicon name: mini/briefcase -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path fill-rule="evenodd" d="M7.502 6h7.128A3.375 3.375 0 0 1 18 9.375v9.375a3 3 0 0 0 3-3V6.108c0-1.505-1.125-2.811-2.664-2.94a48.972 48.972 0 0 0-.673-.05A3 3 0 0 0 15 1.5h-1.5a3 3 0 0 0-2.663 1.618c-.225.015-.45.032-.673.05C8.662 3.295 7.554 4.542 7.502 6ZM13.5 3A1.5 1.5 0 0 0 12 4.5h4.5A1.5 1.5 0 0 0 15 3h-1.5Z" clip-rule="evenodd" />
                <path fill-rule="evenodd" d="M3 9.375C3 8.339 3.84 7.5 4.875 7.5h9.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 0 1 3 20.625V9.375Zm9.586 4.594a.75.75 0 0 0-1.172-.938l-2.476 3.096-.908-.907a.75.75 0 0 0-1.06 1.06l1.5 1.5a.75.75 0 0 0 1.116-.062l3-3.75Z" clip-rule="evenodd" />
              </svg>                    
              <span id="server-description"><svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg></span>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <!-- Heroicon name: mini/map-pin -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path d="M4.08 5.227A3 3 0 0 1 6.979 3H17.02a3 3 0 0 1 2.9 2.227l2.113 7.926A5.228 5.228 0 0 0 18.75 12H5.25a5.228 5.228 0 0 0-3.284 1.153L4.08 5.227Z" />
                <path fill-rule="evenodd" d="M5.25 13.5a3.75 3.75 0 1 0 0 7.5h13.5a3.75 3.75 0 1 0 0-7.5H5.25Zm10.5 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm3.75-.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" clip-rule="evenodd" />
              </svg>              
              Server <%= req.query.id %>
            </div>
            <div class="mt-2 flex items-center text-sm text-gray-300">
              <!-- Heroicon name: mini/currency-dollar -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500">
                <path fill-rule="evenodd" d="M12.516 2.17a.75.75 0 0 0-1.032 0 11.209 11.209 0 0 1-7.877 3.08.75.75 0 0 0-.722.515A12.74 12.74 0 0 0 2.25 9.75c0 5.942 4.064 10.933 9.563 12.348a.749.749 0 0 0 .374 0c5.499-1.415 9.563-6.406 9.563-12.348 0-1.39-.223-2.73-.635-3.985a.75.75 0 0 0-.722-.516l-.143.001c-2.996 0-5.717-1.17-7.734-3.08Zm3.094 8.016a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
              </svg>              
              Volumetric Shield enabled
            </div>
            <div class="hidden mt-2 flex items-center text-sm text-gray-300">
              <!-- Heroicon name: mini/calendar -->
              <svg class="mr-1.5 h-5 w-5 flex-shrink-0 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5.75 2a.75.75 0 01.75.75V4h7V2.75a.75.75 0 011.5 0V4h.25A2.75 2.75 0 0118 6.75v8.5A2.75 2.75 0 0115.25 18H4.75A2.75 2.75 0 012 15.25v-8.5A2.75 2.75 0 014.75 4H5V2.75A.75.75 0 015.75 2zm-1 5.5c-.69 0-1.25.56-1.25 1.25v6.5c0 .69.56 1.25 1.25 1.25h10.5c.69 0 1.25-.56 1.25-1.25v-6.5c0-.69-.56-1.25-1.25-1.25H4.75z" clip-rule="evenodd" />
              </svg>
              <span id="server-name-breadcrumb"></span>
            </div>
          </div>
        </div>
        <div class="mt-5 flex lg:mt-0 lg:ml-4">
          <span class="hidden sm:block">
            <a href="/servers" class="inline-flex items-center rounded-xl border border-transparent bg-indigo-900/50 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-900 transition focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-indigo-800">
              <!-- Heroicon name: mini/pencil -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="-ml-1 mr-2 h-5 w-5 text-indigo-200">
                <path fill-rule="evenodd" d="M9.53 2.47a.75.75 0 0 1 0 1.06L4.81 8.25H15a6.75 6.75 0 0 1 0 13.5h-3a.75.75 0 0 1 0-1.5h3a5.25 5.25 0 1 0 0-10.5H4.81l4.72 4.72a.75.75 0 1 1-1.06 1.06l-6-6a.75.75 0 0 1 0-1.06l6-6a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
              </svg>                
              Back to server list
            </a>
          </span>
        </div>
      </div>      

    <%- include('../components/server') %>

<div class="space-y-8">
    <!-- SFTP Access Panel -->
    <div class="bg-white/5 rounded-xl overflow-hidden <% if (req.query.mode == "rdp") { %>hidden<% } %>">
        <div class="bg-white/5 px-6 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <h2 class="text-lg font-semibold text-white">SFTP Access</h2>
            </div>
            <div class="flex items-center">
                <span class="px-3 py-1 text-xs rounded-full bg-indigo-500/20 text-indigo-300">Recommended</span>
            </div>
        </div>
        <div class="p-6 space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-black/20 rounded-lg p-4">
                    <div class="text-sm text-gray-400 mb-2">SFTP Host</div>
                    <div class="flex items-center space-x-2">
                        <code class="flex-1 text-white bg-black/30 rounded px-3 py-2" id="sftp-host"></code>
                        <button onclick="copyToClipboard('sftp-host')" class="text-gray-400 hover:text-white transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="bg-black/20 rounded-lg p-4">
                    <div class="text-sm text-gray-400 mb-2">SFTP Username</div>
                    <div class="flex items-center space-x-2">
                        <code class="flex-1 text-white bg-black/30 rounded px-3 py-2" id="sftp-username"></code>
                        <button onclick="copyToClipboard('sftp-username')" class="text-gray-400 hover:text-white transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            <div class="text-sm text-gray-400">
                <p>Port: <span class="text-white">2929</span></p>
                <p class="mt-2">Password can be found under "SFTP Credentials" in the main sidebar</p>
            </div>
        </div>
    </div>

    <!-- Server Rename Panel -->
    <div class="bg-white/5 rounded-xl overflow-hidden <% if (req.query.mode == "rdp") { %>hidden<% } %>">
        <div class="bg-white/5 px-6 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <h2 class="text-lg font-semibold text-white">Rename Server</h2>
            </div>
        </div>
        <div class="p-6">
            <div class="flex space-x-4">
                <input type="text" id="server-name-input" class="flex-1 p-3 bg-black/20 text-white border border-transparent rounded-xl focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 transition" placeholder="Enter new server name">
                <button id="rename-server" class="bg-indigo-500 text-sm hover:bg-indigo-600 text-white font-medium px-6 rounded-xl flex items-center space-x-2 transition duration-200 hover:scale-95">
                    <span>Rename</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Server Reinstall Panel -->
    <div class="bg-white/5 rounded-xl overflow-hidden <% if (req.query.mode == "rdp") { %>hidden<% } %>">
        <div class="bg-white/5 px-6 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <h2 class="text-lg font-semibold text-white">Reinstall Server</h2>
            </div>
        </div>
        <div class="p-6 space-y-4">
            <div class="bg-amber-500/10 border border-amber-500/20 rounded-lg p-4">
                <div class="flex items-start space-x-3">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6 text-amber-400 mt-0.5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
</svg>

                    <div class="flex-1">
                        <h3 class="text-md font-medium text-amber-400">Warning</h3>
                        <p class="mt-1 text-gray-300 text-sm">This action will completely reset your server to its default state. All files, databases, and configurations will be permanently deleted.</p>
                    </div>
                </div>
            </div>
            <div class="flex justify-end">
                <button id="reinstall-server" class="bg-amber-500 hover:bg-amber-600 text-sm text-white font-medium px-6 py-2 rounded-xl flex items-center space-x-2 transition duration-200 hover:scale-95">
                    <span>Reinstall</span>
                </button>
            </div>
        </div>
    </div>

<% if (req.query.numeric !== '0') { %>

    <!-- Server Delete Panel -->
    <div class="bg-white/5 rounded-xl overflow-hidden">
        <div class="bg-white/5 px-6 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <h2 class="text-lg font-semibold text-white">Delete Server</h2>
            </div>
        </div>
        <div class="p-6 space-y-4">
            <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                <div class="flex items-start space-x-3">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6 text-red-400 mt-0.5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
</svg>
                    <div class="flex-1">
                        <h3 class="text-md font-medium text-red-400">Danger Zone</h3>
                        <p class="mt-1 text-sm text-gray-300">This action is irreversible. All server data, including files, databases, and configurations, will be permanently deleted. The server's resources will be returned to your account.</p>
                    </div>
                </div>
            </div>
            <div class="flex justify-end">
                <button id="delete-server" class="bg-red-500 hover:bg-red-600 text-white font-medium px-6 py-2 rounded-xl text-sm flex items-center space-x-2 transition duration-200 hover:scale-95">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m0-10.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.75c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.75h-.152c-3.196 0-6.1-1.25-8.25-3.286Zm0 13.036h.008v.008H12v-.008Z" />
</svg>
                    <span>Delete Server</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    const text = element.textContent;
    navigator.clipboard.writeText(text).then(() => {
        // Add a temporary success effect
        element.classList.add('bg-white/20');
        setTimeout(() => {
            element.classList.remove('bg-white/20');
        }, 500);
    });
}

// Initialize SFTP details
document.addEventListener('DOMContentLoaded', () => {
    const serverId = new URLSearchParams(window.location.search).get('id');
    fetch(`/api/server/${serverId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('sftp-host').textContent = `sftp://${data.attributes.sftp_details.ip}:2929`;
            document.getElementById('sftp-username').textContent = `<%= req.session.pterodactyl.username %>.${data.attributes.identifier}`;
        });
});
</script>

    <!-- Enhanced Advanced Settings -->
    <div class="bg-white/5 rounded-xl p-6 mt-8 <% if (req.query.mode == "rdp") { %>hidden<% } %>">
        <!-- Docker Image Selection -->
        <div class="mb-6">
            <label class="block text-sm font-medium text-gray-300 mb-2">Docker Image</label>
            <div class="space-y-4">
                <div class="flex gap-4">
                    <select id="image-category" class="flex-1 p-3 bg-white/5 text-white border border-transparent rounded-lg focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 transition">
                        <option value="">Select Category</option>
                        <option value="java">Java</option>
                        <option value="games">Games</option>
                        <option value="nodejs">NodeJS</option>
                        <option value="python">Python</option>
                        <option value="golang">Golang</option>
                        <option value="base">Base OS</option>
                    </select>
                    <input type="text" id="image-search" placeholder="Search images..." class="flex-1 p-3 bg-white/5 text-white border border-transparent rounded-lg focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 transition">
                </div>
                <div id="docker-images" class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4"></div>
            </div>
            <input type="text" id="docker-image" class="w-full p-3 mt-4 bg-white/5 text-white border border-transparent rounded-lg focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 transition" placeholder="Docker Image">
        </div>

        <!-- Startup Command with Help -->
        <div class="mb-6">
            <label class="block text-sm font-medium text-gray-300 mb-2">Startup Command</label>
            <div class="relative">
                <input type="text" id="startup-command" class="w-full p-3 bg-white/5 text-white border border-transparent rounded-lg focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 transition" placeholder="Startup Command">
                <button id="show-startup-help" class="absolute right-3 top-3 text-gray-400 hover:text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </button>
            </div>
            <div id="startup-help" class="hidden mt-4 p-4 bg-black/20 rounded-lg">
                <h4 class="font-medium text-white mb-2">Common Variables:</h4>
                <ul class="text-gray-300 space-y-2 text-sm">
                    <li><code class="bg-black/20 px-2 py-1 rounded">{{SERVER_MEMORY}}</code> - Allocated memory in MB</li>
                    <li><code class="bg-black/20 px-2 py-1 rounded">{{SERVER_IP}}</code> - Server IP address</li>
                    <li><code class="bg-black/20 px-2 py-1 rounded">{{SERVER_PORT}}</code> - Server port</li>
                    <li><code class="bg-black/20 px-2 py-1 rounded">{{SERVER_JARFILE}}</code> - Main server file</li>
                </ul>
                <div class="mt-4">
                    <h4 class="font-medium text-white mb-2">Common Examples:</h4>
                    <div class="space-y-2 text-sm text-gray-300">
                        <p><strong>Minecraft (Java):</strong><br>
                        <code class="bg-black/20 px-2 py-1 rounded">java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}</code></p>
                        <p><strong>Node.js App:</strong><br>
                        <code class="bg-black/20 px-2 py-1 rounded">node {{SERVER_JARFILE}}</code></p>
                        <p><strong>Python App:</strong><br>
                        <code class="bg-black/20 px-2 py-1 rounded">python {{SERVER_JARFILE}}</code></p>
                    </div>
                </div>
            </div>
        </div>

        <button id="update-advanced-settings" class="bg-indigo-500 hover:bg-indigo-700 text-white font-medium py-2 px-6 rounded-full hover:scale-95 transition">Update Advanced Settings</button>
    </div>
<% } else { %>
    <!-- Server Delete -->
    <div class="bg-white/5 rounded-xl p-6 mt-8">
        <h2 class="text-xl font-semibold mb-4 text-white">SFTP Access</h2>
        <p class="text-gray-300 mb-4">Since you are a subuser, you need to use the server owner's SFTP credentials. Please ask them to provide you with them.</p>
    </div>
<% } %>
</main>

<!-- Confirmation Modal -->
<div id="confirmation-modal" class="fixed inset-0 bg-black z-50 bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-[#1a1c20] backdrop-blur rounded-xl p-6 max-w-md w-full">
        <h3 class="text-xl font-semibold mb-4 text-white" id="modal-title"></h3>
        <p class="text-gray-300 mb-4" id="modal-message"></p>
        <div class="flex justify-end space-x-4">
            <button id="modal-cancel" class="bg-zinc-600 hover:bg-zinc-700 text-white font-medium py-2 px-4 rounded-lg transition">Cancel</button>
            <button id="modal-confirm" class="bg-indigo-500 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-lg transition">Confirm</button>
        </div>
    </div>
</div>

<script>
    const serverId = new URLSearchParams(window.location.search).get('id');

    // Function to show the confirmation modal
    function showConfirmationModal(title, message, onConfirm) {
        const modal = document.getElementById('confirmation-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalMessage = document.getElementById('modal-message');
        const confirmButton = document.getElementById('modal-confirm');
        const cancelButton = document.getElementById('modal-cancel');

        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modal.classList.remove('hidden');

        confirmButton.onclick = () => {
            onConfirm();
            modal.classList.add('hidden');
        };

        cancelButton.onclick = () => {
            modal.classList.add('hidden');
        };
    }

const dockerImages = {
    java: {
        name: "Java",
        images: [
            { version: "Java 8", image: "ghcr.io/pterodactyl/yolks:java_8", description: "OpenJDK 8 - Great for older Minecraft versions" },
            { version: "Java 8 - OpenJ9", image: "ghcr.io/pterodactyl/yolks:java_8j9", description: "OpenJ9 JVM - Better memory management" },
            { version: "Java 11", image: "ghcr.io/pterodactyl/yolks:java_11", description: "OpenJDK 11 - Good for newer Minecraft versions" },
            { version: "Java 17", image: "ghcr.io/pterodactyl/yolks:java_17", description: "OpenJDK 17 - Latest LTS, best for modern Minecraft" },
            { version: "Java 21", image: "ghcr.io/pterodactyl/yolks:java_21", description: "OpenJDK 21 - Newest version, experimental features" }
        ]
    },
    games: {
        name: "Games",
        images: [
            { version: "Rust", image: "ghcr.io/pterodactyl/games:rust", description: "Optimized for Rust game servers" },
            { version: "Source", image: "ghcr.io/pterodactyl/games:source", description: "For Source engine based games" }
        ]
    },
    nodejs: {
        name: "NodeJS",
        images: [
            { version: "Node 16", image: "ghcr.io/pterodactyl/yolks:nodejs_16", description: "NodeJS 16 LTS" },
            { version: "Node 18", image: "ghcr.io/pterodactyl/yolks:nodejs_18", description: "NodeJS 18 LTS" },
            { version: "Node 20", image: "ghcr.io/pterodactyl/yolks:nodejs_20", description: "NodeJS 20 LTS - Latest version" }
        ]
    },
    python: {
        name: "Python",
        images: [
            { version: "Python 3.8", image: "ghcr.io/pterodactyl/yolks:python_3.8", description: "Python 3.8" },
            { version: "Python 3.9", image: "ghcr.io/pterodactyl/yolks:python_3.9", description: "Python 3.9" },
            { version: "Python 3.10", image: "ghcr.io/pterodactyl/yolks:python_3.10", description: "Python 3.10 - Latest version" }
        ]
    },
    golang: {
        name: "Golang",
        images: [
            { version: "Go 1.16", image: "ghcr.io/pterodactyl/yolks:go_1.16", description: "Go 1.16" },
            { version: "Go 1.17", image: "ghcr.io/pterodactyl/yolks:go_1.17", description: "Go 1.17 - Latest version" }
        ]
    },
    base: {
        name: "Base OS",
        images: [
            { version: "Alpine", image: "ghcr.io/pterodactyl/yolks:alpine", description: "Lightweight Alpine Linux" },
            { version: "Debian", image: "ghcr.io/pterodactyl/yolks:debian", description: "Debian Linux - More included packages" }
        ]
    }
};

document.addEventListener('DOMContentLoaded', function() {
    const imageCategory = document.getElementById('image-category');
    const imageSearch = document.getElementById('image-search');
    const dockerImageInput = document.getElementById('docker-image');
    const dockerImagesDiv = document.getElementById('docker-images');
    const startupHelpBtn = document.getElementById('show-startup-help');
    const startupHelp = document.getElementById('startup-help');
        const Numeric = new URLSearchParams(window.location.search).get('numeric');
        const startupCommandInput = document.getElementById('startup-command');
        const updateButton = document.getElementById('update-advanced-settings')

    // Initialize Docker image selection
    function renderDockerImages(category = '', searchTerm = '') {
        dockerImagesDiv.innerHTML = '';
        
        let imagesToShow = [];
        if (category) {
            imagesToShow = dockerImages[category].images;
        } else {
            // Show all images when no category is selected
            Object.values(dockerImages).forEach(cat => {
                imagesToShow = [...imagesToShow, ...cat.images];
            });
        }

        // Apply search filter
        if (searchTerm) {
            const term = searchTerm.toLowerCase();
            imagesToShow = imagesToShow.filter(img => 
                img.version.toLowerCase().includes(term) || 
                img.description.toLowerCase().includes(term) ||
                img.image.toLowerCase().includes(term)
            );
        }

        imagesToShow.forEach(img => {
            const imageCard = document.createElement('div');
            imageCard.className = 'p-4 bg-black/20 rounded-lg cursor-pointer hover:bg-black/30 transition';
            imageCard.innerHTML = `
                <div class="font-medium text-white mb-1">${img.version}</div>
                <div class="text-sm text-gray-400 mb-2">${img.description}</div>
                <code class="text-xs text-gray-500">${img.image}</code>
            `;
            imageCard.onclick = () => {
                dockerImageInput.value = img.image;
                // Highlight the selected image
                document.querySelectorAll('#docker-images > div').forEach(card => {
                    card.classList.remove('ring-2', 'ring-indigo-500');
                });
                imageCard.classList.add('ring-2', 'ring-indigo-500');
            };
            dockerImagesDiv.appendChild(imageCard);
        });
    }

    // Event listeners for Docker image selection
    imageCategory.addEventListener('change', () => {
        renderDockerImages(imageCategory.value, imageSearch.value);
    });

    imageSearch.addEventListener('input', () => {
        renderDockerImages(imageCategory.value, imageSearch.value);
    });

    // Toggle startup command help
    startupHelpBtn.addEventListener('click', () => {
        startupHelp.classList.toggle('hidden');
    });

    // Initial render
    renderDockerImages();

<% if (req.query.numeric !== '0') { %>
        // Autofill the fields with current server data
        <% pterodactyl.relationships.servers.data.forEach(function(server) { %>
            if ('<%= server.attributes.id %>' === '<%= req.query.numeric %>') {
                dockerImageInput.value = '<%= server.attributes.container.image %>';
                startupCommandInput.value = '<%= server.attributes.container.startup_command %>';
            }
        <% }); %>

        updateButton.addEventListener('click', function() {
            const newDockerImage = dockerImageInput.value;
            const newStartupCommand = startupCommandInput.value;

            showConfirmationModal(
                'Update Advanced Settings',
                'Are you sure you want to update the Docker image and startup command? This may require a server restart and could very easily go wrong if you do not know what you are doing. After performing this action, you will be automatically re-logged in. This is so we can fetch the latest Docker image settings from your server.',
                function() {
                    fetch(`/api/server/${Numeric}/startup`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            image: newDockerImage,
                            startup: newStartupCommand
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.attributes) {
                            alert('Advanced settings updated successfully');
                            window.location.href = "/updateinfo"
                            // Update the input fields with the new values
                            dockerImageInput.value = data.attributes.container.image;
                            startupCommandInput.value = data.attributes.container.startup_command;
                        } else {
                            alert('Failed to update advanced settings');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while updating advanced settings');
                    });
                }
            );
        });
    });
<% } %>

    // Rename server
    document.getElementById('rename-server').addEventListener('click', () => {
        const newName = document.getElementById('server-name-input').value;
        if (newName) {
            showConfirmationModal(
                'Rename Server',
                `Are you sure you want to rename the server to "${newName}"?`,
                () => {
                    fetch(`/api/server/${serverId}/rename`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ name: newName })
                    })
                    .then(response => {
                        if (response.ok) {
                            alert('Server renamed successfully');
                            // Update the server name in the UI
                            document.getElementById('server-name').textContent = newName;
                        } else {
                            alert('Failed to rename server');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while renaming the server');
                    });
                }
            );
        }
    });

 // Update the reinstall server event listener
document.getElementById('reinstall-server').addEventListener('click', () => {
    showConfirmationModal(
        'Reinstall Server',
        'Are you sure you want to reinstall the server? This action cannot be undone and all data will be lost.',
        () => {
            fetch(`/api/server/${serverId}/reinstall`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include' // Include credentials if using sessions
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                alert('Server reinstallation initiated');
                // Optionally refresh the page or update UI
                window.location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Done!')
            });
        }
    );
});

<% if (req.query.numeric !== '0') { %>
    // Delete server
    document.getElementById('delete-server').addEventListener('click', () => {
        showConfirmationModal(
            'Delete Server',
            'Are you sure you want to delete the server? This action cannot be undone and all data will be lost.',
            () => {
                window.location.href = '/delete?id=<%= req.query.numeric %>'
            }
        );
    });
<% } %>
    // Load server details
    fetch(`/api/server/${serverId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('server-name').textContent = data.attributes.name;
            document.getElementById('server-name-breadcrumb').textContent = data.attributes.name;
            document.getElementById('server-description').textContent = data.attributes.description || "No description set.";
            document.getElementById('ip').textContent = 'sftp://' + data.attributes.sftp_details.ip + ':2022';
        });
</script>

<%- include('../components/bottom') %>