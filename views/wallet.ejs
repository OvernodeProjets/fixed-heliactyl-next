<%- include('./components/top') %>

<main class="container mx-auto px-6 py-12 max-w-7xl">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center w-full mx-auto pb-8">
        <div class="flex flex-col">
            <h1 class="text-2xl font-bold mb-2 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">Wallet</h1>
            <p class="text-gray-400 text-lg">Manage your <%= settings.website.currency %> balances and transactions.</p>
        </div>

        <nav aria-label="Breadcrumb" class="inline-flex py-2 px-4 rounded-xl bg-white/5 transition-colors duration-200">
            <ol role="list" class="flex items-center space-x-2">
                <li>
                    <a href="#_" class="text-sm flex items-center gap-2 text-zinc-400 hover:text-zinc-200 transition-colors duration-200" aria-current="false">
                        <svg
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="icon icon-tabler size-4 icons-tabler-outline icon-tabler-home"
                        >
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M5 12l-2 0l9 -9l9 9l-2 0"></path>
                            <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path>
                            <path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"></path>
                        </svg>
                        <span>Home</span>
                    </a>
                </li>
                <li class="flex items-center">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right size-4 text-zinc-400"
                    >
                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                        <path d="M9 6l6 6l-6 6"></path>
                    </svg>
                </li>
                <li>
                    <a href="#_" class="text-sm flex items-center gap-2 font-medium text-white/80 hover:text-white transition-colors duration-200" aria-current="page">
                        Wallet
                    </a>
                </li>
            </ol>
        </nav>
    </div>

    <!-- Balance Overview -->
    <div class="rounded-xl bg-[rgba(23,23,28,0.7)] shadow-lg shadow-black/40 backdrop-blur-md border border-white/5 relative overflow-hidden z-10 backdrop-blur-lg bg-gradient-to-br from-[rgba(17,17,22,0.8)] to-[rgba(28,28,35,0.8)] before:content-[''] before:absolute before:inset-0 before:bg-[radial-gradient(circle_at_top_right,rgba(67,56,202,0.12),transparent_40%),radial-gradient(circle_at_bottom_left,rgba(59,130,246,0.12),transparent_40%)] before:-z-20 after:content-[''] after:absolute after:inset-0 after:bg-gradient-to-br after:from-indigo-600/20 after:to-blue-500/20 after:-z-10 after:opacity-70 p-10 mb-10">
        <div class="flex justify-between items-center mb-8">
            <h2 class="text-2xl font-semibold text-white/95">Your Balance</h2>
            <div id="userAddress" class="text-sm bg-black/20 hover:bg-black/30 border border-white/5 transition-all duration-200 rounded-full py-2.5 px-5 cursor-pointer text-white/80 hover:border-white/10">
                <%= req.session.userinfo.id %>
            </div>
        </div>
        <div class="text-center py-10">
            <p id="currentBalance" class="text-6xl font-bold mb-10 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent tracking-tight">Loading...</p>
            <div class="flex justify-center space-x-4">
                <button onclick="showTransferModal()" class="bg-indigo-600 text-white px-8 py-3 rounded-full font-semibold hover:bg-indigo-700 transition-all duration-200 shadow-lg shadow-indigo-900/20 hover:shadow-indigo-900/40 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="size-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M3.105 2.288a.75.75 0 0 0-.826.95l1.414 4.926A1.5 1.5 0 0 0 5.135 9.25h6.115a.75.75 0 0 1 0 1.5H5.135a1.5 1.5 0 0 0-1.442 1.086l-1.414 4.926a.75.75 0 0 0 .826.95 28.897 28.897 0 0 0 15.293-7.155.75.75 0 0 0 0-1.114A28.897 28.897 0 0 0 3.105 2.288Z" />
                    </svg>
                    Send <%= settings.website.currency %>
                </button>
            </div>
        </div>
    </div>

    <!-- Recent Transactions -->
    <div class="rounded-xl bg-[rgba(23,23,28,0.7)] shadow-lg shadow-black/40 backdrop-blur-md border border-white/5 p-8 mt-10 mb-8">
        <h2 class="text-2xl font-semibold mb-6 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent">Recent Transactions</h2>
        <div id="recentTransactions" class="space-y-3 mb-6">
            <!-- Transactions will be dynamically inserted here -->
        </div>
        <button id="showAllTransactions" class="w-full text-center py-3 text-white/70 hover:text-white transition-all duration-200 border-t border-white/5 hover:border-white/10 mt-4">
            <span class="inline-flex items-center">
                Show All Transactions
                <svg xmlns="http://www.w3.org/2000/svg" class="size-4 ml-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M6 9l6 6 6-6"/>
                </svg>
            </span>
        </button>
    </div>
</main>

<!-- Transaction Details Modal -->
<div id="transactionModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-200 ease-in-out">
    <div id="transactionModalContent" class="bg-[#191c20] p-8 rounded-lg max-w-md w-full transform scale-95 opacity-0 transition-all duration-300 ease-in-out">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-semibold text-white">Transaction Details</h2>
            <button onclick="hideTransactionModal()" class="text-gray-400 hover:text-white transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div id="transactionDetails" class="space-y-4">
            <!-- Content will be dynamically inserted here -->
        </div>
    </div>
</div>

<!-- Transfer Modal -->
<div id="transferModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-200 ease-in-out">
    <div id="modalContent" class="bg-[#191c20] p-8 rounded-lg max-w-md w-full transform scale-95 opacity-0 transition-all duration-300 ease-in-out">
        <h2 class="text-2xl font-semibold text-white mb-4">Transfer <%= settings.website.currency %></h2>
        <form id="transferForm" class="space-y-4">
            <div>
                <label for="receiverId" class="block text-sm font-medium text-gray-300">Receiver Address</label>
                <input type="text" id="receiverId" name="receiverId" required 
                class="mt-1 block w-full rounded-md bg-white/5 border border-white/10 text-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div>
                <label for="amount" class="block text-sm font-medium text-gray-300">Amount</label>
                <input type="number" id="amount" name="amount" required min="1" step="1" 
                class="mt-1 block w-full rounded-md bg-white/5 border border-white/10 text-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="flex justify-end space-x-4">
                <button type="button" onclick="hideTransferModal()" 
                    class="px-4 py-2 bg-white/10 text-white rounded-full hover:bg-white/20 transition-colors">
                    Cancel
                </button>
                <button type="submit"
                    class="px-4 py-2 bg-indigo-600 text-white rounded-full font-medium hover:bg-indigo-700 transition-colors">
                    Confirm Transfer
                </button>
            </div>
        </form>
    </div>
</div>

<script>
let transactions = [];

async function fetchTransactions() {
    try {
        const response = await fetch('/wallet/transactions');
        const data = await response.json();
        transactions = data.transactions
            .sort((a, b) => b.timestamp - a.timestamp) // Sort by descending date
            .filter(t => t.status === 'completed'); // Show only completed transactions
        displayRecentTransactions();
    } catch (error) {
        console.error('Error fetching transactions:', error);
    }
}

function formatDate(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 7) {
        return date.toLocaleDateString('en-US', { 
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    } else if (days > 0) {
        return `${days}d ago`;
    } else if (hours > 0) {
        return `${hours}h ago`;
    } else if (minutes > 0) {
        return `${minutes}m ago`;
    } else {
        return 'Just now';
    }
}

function displayRecentTransactions() {
    const container = document.getElementById('recentTransactions');
    container.innerHTML = '';

    if (transactions.length === 0) {
        container.innerHTML = `
            <div class="text-center py-8 text-gray-400">
                <p>No transactions yet</p>
            </div>
        `;
        return;
    }

    transactions.slice(0, 3).forEach(transaction => {
        const isReceived = transaction.receiverId === '<%= req.session.userinfo.id %>';
        const otherParty = isReceived ? transaction.senderId : transaction.receiverId;
        const formattedDate = formatDate(transaction.timestamp);

        container.innerHTML += `
            <div class="border border-transparent hover:border-white/5 hover:bg-white/5 hover:-translate-y-1 hover:shadow-lg hover:shadow-black/20 transition-all duration-300 flex items-center justify-between p-4 rounded-lg cursor-pointer" 
                 onclick="showTransactionDetails(${JSON.stringify(transaction).replace(/"/g, '&quot;')})">
                <div class="flex items-center space-x-4">
                    <div class="flex-shrink-0">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-6 ${isReceived ? 'text-emerald-400' : 'text-rose-400'}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            ${isReceived ? 
                            '<path d="M12 3v18M3 11l9 9 9-9"/>' : 
                            '<path d="M12 21V3M3 13l9-9 9 9"/>'}
                        </svg>
                    </div>
                    <div class="flex flex-col">
                        <div class="flex items-center space-x-2">
                            <p class="font-semibold">${isReceived ? 'Received' : 'Sent'} ${transaction.currency}</p>
                            <span class="text-xs text-gray-400">${formattedDate}</span>
                        </div>
                        <p class="text-sm text-gray-400 font-mono">${otherParty}</p>
                    </div>
                </div>
                <div class="flex flex-col items-end">
                    <p class="text-lg font-semibold ${isReceived ? 'text-emerald-400' : 'text-rose-400'} tabular-nums">
                        ${isReceived ? '+' : '-'}${Math.abs(transaction.amount).toLocaleString()} ${transaction.currency}
                    </p>
                </div>
            </div>
        `;
    });
}

function showTransferModal() {
    const modal = document.getElementById('transferModal');
    const modalContent = document.getElementById('modalContent');
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
    }, 10);
}

function hideTransferModal() {
    const modal = document.getElementById('transferModal');
    const modalContent = document.getElementById('modalContent');
    
    modalContent.classList.remove('scale-100', 'opacity-100');
    modalContent.classList.add('scale-95', 'opacity-0');
    setTimeout(() => {
        modal.classList.add('opacity-0', 'pointer-events-none');
    }, 300);
}

// Balance Update
async function fetchWalletData() {
    try {
        const response = await fetch('/wallet/balance');
        const data = await response.json();
        document.getElementById('currentBalance').textContent = `${data.balance.toLocaleString()} <%= settings.website.currency %>`;
    } catch (error) {
        console.error('Error fetching wallet data:', error);
    }
}

// Copy Address
document.getElementById('userAddress').addEventListener('click', function() {
    const text = this.textContent.trim();
    navigator.clipboard.writeText(text).then(() => {
        const originalText = this.textContent;
        this.textContent = 'Copied!';
        setTimeout(() => {
            this.textContent = originalText;
        }, 2000);
    });
});

// Transfer Form Handler
document.getElementById('transferForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const receiverId = document.getElementById('receiverId').value;
    const amount = document.getElementById('amount').value;

    try {
        const response = await fetch('/wallet/transfer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ receiverId, amount: parseInt(amount), currency: '<%= settings.website.currency %>' }),
        });

        const result = await response.json();

        if (response.ok) {
            showSuccess('Transfer successful!');
            hideTransferModal();
            fetchWalletData();
            fetchTransactions();
        } else {
            showError(`Transfer failed: ${result.error}`);
        }
    } catch (error) {
        console.error('Error during transfer:', error);
        showError('An error occurred during the transfer. Please try again.');
    }
});

// Success/Error Notifications
function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-xl shadow-lg transform transition-all duration-300 opacity-0 translate-y-2';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.remove('opacity-0', 'translate-y-2');
    }, 10);
    
    setTimeout(() => {
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-xl shadow-lg transform transition-all duration-300 opacity-0 translate-y-2';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.remove('opacity-0', 'translate-y-2');
    }, 10);
    
    setTimeout(() => {
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    fetchWalletData();
    fetchTransactions();

    const copyButton = document.getElementById('userAddress');
    const showAllTransactionsButton = document.getElementById('showAllTransactions');

    showAllTransactionsButton.addEventListener('click', () => {
        const container = document.getElementById('recentTransactions');
        
        if (transactions.length <= 3) {
            showAllTransactionsButton.style.display = 'none';
            return;
        }

        transactions.forEach((transaction, index) => {
            if (index >= 3) {
                const isReceived = transaction.receiverId === '<%= req.session.userinfo.id %>';
                const otherParty = isReceived ? transaction.senderId : transaction.receiverId;
                const formattedDate = formatDate(transaction.timestamp);

                const transactionElement = document.createElement('div');
                transactionElement.className = 'transaction-item hover:bg-white/5 flex items-center justify-between p-4 rounded-lg opacity-0 transform translate-y-4 transition-all duration-200';
                transactionElement.innerHTML = `
                    <div class="flex items-center space-x-4">
                        <div class="flex-shrink-0">
                            <svg xmlns="http://www.w3.org/2000/svg" class="size-6 ${isReceived ? 'text-emerald-400' : 'text-rose-400'}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                ${isReceived ? 
                                '<path d="M12 3v18M3 11l9 9 9-9"/>' : 
                                '<path d="M12 21V3M3 13l9-9 9 9"/>'}
                            </svg>
                        </div>
                        <div class="flex flex-col">
                            <div class="flex items-center space-x-2">
                                <p class="font-semibold">${isReceived ? 'Received' : 'Sent'} ${transaction.currency}</p>
                                <span class="text-xs text-gray-400">${formattedDate}</span>
                            </div>
                            <p class="text-sm text-gray-400 font-mono">${otherParty}</p>
                        </div>
                    </div>
                    <div class="flex flex-col items-end">
                        <p class="text-lg font-semibold ${isReceived ? 'text-emerald-400' : 'text-rose-400'} tabular-nums">
                            ${isReceived ? '+' : '-'}${Math.abs(transaction.amount).toLocaleString()} ${transaction.currency}
                        </p>
                    </div>
                `;
                container.appendChild(transactionElement);

                setTimeout(() => {
                    transactionElement.classList.remove('opacity-0', 'transform', 'translate-y-4');
                }, 50 * (index - 2));
            }
        });
        showAllTransactionsButton.style.display = 'none';
    });
});

// Transaction Modal Functions
function showTransactionDetails(transaction) {
    const modal = document.getElementById('transactionModal');
    const modalContent = document.getElementById('transactionModalContent');
    const detailsContainer = document.getElementById('transactionDetails');
    
    const isReceived = transaction.receiverId === '<%= req.session.userinfo.id %>';
    const formattedDate = new Date(transaction.timestamp).toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });

    detailsContainer.innerHTML = `
        <div class="bg-white/5 rounded-lg p-6 space-y-4">
            <div class="flex items-center justify-between">
                <span class="text-gray-400">Type</span>
                <span class="font-semibold ${isReceived ? 'text-emerald-400' : 'text-rose-400'}">
                    ${isReceived ? 'Received' : 'Sent'}
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-gray-400">Amount</span>
                <span class="font-semibold ${isReceived ? 'text-emerald-400' : 'text-rose-400'}">
                    ${isReceived ? '+' : '-'}${Math.abs(transaction.amount).toLocaleString()} ${transaction.currency}
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-gray-400">Status</span>
                <span class="px-2 py-1 rounded-full text-xs ${
                    transaction.status === 'completed' ? 'bg-emerald-400/20 text-emerald-400' : 
                    transaction.status === 'pending' ? 'bg-yellow-400/20 text-yellow-400' : 
                    'bg-red-400/20 text-red-400'
                }">
                    ${transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
                </span>
            </div>
            <div class="pt-4 border-t border-white/10">
                <p class="text-gray-400 text-sm mb-2">Transaction ID</p>
                <p class="font-mono text-sm bg-white/5 p-2 rounded break-all">${transaction.transactionKey}</p>
            </div>
            <div class="space-y-2">
                <p class="text-gray-400 text-sm">Sender</p>
                <p class="font-mono text-sm bg-white/5 p-2 rounded break-all">${transaction.senderId}</p>
            </div>
            <div class="space-y-2">
                <p class="text-gray-400 text-sm">Receiver</p>
                <p class="font-mono text-sm bg-white/5 p-2 rounded break-all">${transaction.receiverId}</p>
            </div>
            ${transaction.description ? `
            <div class="pt-4 border-t border-white/10">
                <p class="text-gray-400 text-sm">Description</p>
                <p class="text-sm">${transaction.description}</p>
            </div>` : ''}
            <div class="pt-4 border-t border-white/10">
                <p class="text-gray-400 text-sm">Timestamp</p>
                <p class="text-sm">${formattedDate}</p>
            </div>
        </div>
    `;

    modal.classList.remove('opacity-0', 'pointer-events-none');
    setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
    }, 10);
}

function hideTransactionModal() {
    const modal = document.getElementById('transactionModal');
    const modalContent = document.getElementById('transactionModalContent');
    
    modalContent.classList.remove('scale-100', 'opacity-100');
    modalContent.classList.add('scale-95', 'opacity-0');
    setTimeout(() => {
        modal.classList.add('opacity-0', 'pointer-events-none');
    }, 300);
}

setInterval(fetchWalletData, 30000); // Refresh every 30 seconds
setInterval(fetchTransactions, 30000); // Refresh every 30 seconds

</script>

<%- include('./components/bottom') %>