<%- include('./components/top') %>

<main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center w-full mx-auto pb-4">
        <div class="flex flex-col">
            <h1 class="text-xl font-semibold mb-0.5 heavy">Wallet</h1>
            <p class="text-gray-400 text-md">Manage your <%= settings.website.currency %> balance and transactions.</p>
        </div>

        <nav aria-label="Breadcrumb" class="inline-flex py-2 px-4 rounded-xl bg-white/5 transition-colors duration-200">
            <ol role="list" class="flex items-center space-x-2">
                <li>
                    <a href="#_" class="text-sm flex items-center gap-2 text-zinc-400 hover:text-zinc-200 transition-colors duration-200" aria-current="false">
                        <svg
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="icon icon-tabler size-4 icons-tabler-outline icon-tabler-home"
                        >
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M5 12l-2 0l9 -9l9 9l-2 0"></path>
                            <path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path>
                            <path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"></path>
                        </svg>
                        <span>Home</span>
                    </a>
                </li>
                <li class="flex items-center">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right size-4 text-zinc-400"
                    >
                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                        <path d="M9 6l6 6l-6 6"></path>
                    </svg>
                </li>
                <li>
                    <a href="#_" class="text-sm flex items-center gap-2 font-medium text-white/80 hover:text-white transition-colors duration-200" aria-current="page">
                        Wallet
                    </a>
                </li>
            </ol>
        </nav>
    </div>

    <div class="mx-auto mt-12">
        <!-- Balance Overview -->
        <div class="rounded-2xl p-6 border border-white/5 shadow mb-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-white/90">Your Balance</h2>
                <div id="userAddress" class="text-sm bg-white/10 hover:bg-white/20 transition-colors duration-200 rounded-xl py-2 px-4 cursor-pointer text-white/80">
                    <%= req.session.userinfo.id %>
                </div>
            </div>
            <p id="currentBalance" class="text-5xl font-bold text-white mb-8">Loading...</p>
            <button onclick="showTransferModal()" class="bg-white/10 hover:bg-white/20 transition-colors duration-200 text-white px-6 py-3 rounded-xl font-medium flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M3.105 2.288a.75.75 0 0 0-.826.95l1.414 4.926A1.5 1.5 0 0 0 5.135 9.25h6.115a.75.75 0 0 1 0 1.5H5.135a1.5 1.5 0 0 0-1.442 1.086l-1.414 4.926a.75.75 0 0 0 .826.95 28.897 28.897 0 0 0 15.293-7.155.75.75 0 0 0 0-1.114A28.897 28.897 0 0 0 3.105 2.288Z" />
                </svg>
                Send <%= settings.website.currency %>
            </button>
        </div>

<!-- Transfer Modal -->
<div id="transferModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
    <div id="modalContent" class="bg-[#191c20] rounded-2xl p-8 w-full max-w-md transform scale-95 opacity-0 transition-all duration-300">
        <h2 class="text-2xl font-semibold mb-6">Transfer <%= settings.website.currency %></h2>
        <form id="transferForm" class="space-y-6">
            <div>
                <label for="receiverId" class="block text-sm font-medium text-gray-300 mb-2">Receiver Address</label>
                <input type="text" id="receiverId" name="receiverId" required 
                    class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
            </div>
            <div>
                <label for="amount" class="block text-sm font-medium text-gray-300 mb-2">Amount</label>
                <input type="number" id="amount" name="amount" required min="1" step="1" 
                    class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="hideTransferModal()" 
                    class="px-4 py-2 bg-white/10 text-white rounded-xl font-medium hover:bg-white/20 transition-colors duration-200">
                    Cancel
                </button>
                <button type="submit" 
                    class="px-4 py-2 bg-indigo-600 text-white rounded-xl font-medium hover:bg-indigo-700 transition-colors duration-200">
                    Confirm Transfer
                </button>
            </div>
        </form>
    </div>
</div>

<script>
// Modal Controls
function showTransferModal() {
    const modal = document.getElementById('transferModal');
    const modalContent = document.getElementById('modalContent');
    
    modal.classList.remove('opacity-0', 'pointer-events-none');
    setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
    }, 10);
}

function hideTransferModal() {
    const modal = document.getElementById('transferModal');
    const modalContent = document.getElementById('modalContent');
    
    modalContent.classList.remove('scale-100', 'opacity-100');
    modalContent.classList.add('scale-95', 'opacity-0');
    setTimeout(() => {
        modal.classList.add('opacity-0', 'pointer-events-none');
    }, 300);
}

// Balance Update
async function fetchWalletData() {
    try {
        const response = await fetch('/wallet/balance');
        const data = await response.json();
        document.getElementById('currentBalance').textContent = `${data.XPL.toLocaleString()} <%= settings.website.currency %>`;
    } catch (error) {
        console.error('Error fetching wallet data:', error);
    }
}

// Copy Address
document.getElementById('userAddress').addEventListener('click', function() {
    const text = this.textContent.trim();
    navigator.clipboard.writeText(text).then(() => {
        const originalText = this.textContent;
        this.textContent = 'Copied!';
        setTimeout(() => {
            this.textContent = originalText;
        }, 2000);
    });
});

// Transfer Form Handler
document.getElementById('transferForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const receiverId = document.getElementById('receiverId').value;
    const amount = document.getElementById('amount').value;

    try {
        const response = await fetch('/wallet/transfer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ receiverId, amount: parseInt(amount), currency: 'XPL' }),
        });

        const result = await response.json();

        if (response.ok) {
            showSuccess('Transfer successful!');
            hideTransferModal();
            fetchWalletData();
            document.getElementById('transferForm').reset();
        } else {
            showError(`Transfer failed: ${result.error}`);
        }
    } catch (error) {
        console.error('Error during transfer:', error);
        showError('An error occurred during the transfer');
    }
});

// Success/Error Notifications
function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-xl shadow-lg transform transition-all duration-300 opacity-0 translate-y-2';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.remove('opacity-0', 'translate-y-2');
    }, 10);
    
    setTimeout(() => {
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-xl shadow-lg transform transition-all duration-300 opacity-0 translate-y-2';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.remove('opacity-0', 'translate-y-2');
    }, 10);
    
    setTimeout(() => {
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// Initialize
fetchWalletData();
setInterval(fetchWalletData, 30000); // Refresh every 30 seconds
</script>

<%- include('./components/bottom') %>