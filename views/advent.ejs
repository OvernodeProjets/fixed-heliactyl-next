<%- include('./components/top') %>

<main class="flex-grow container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="flex justify-between items-center w-full mx-auto pb-4">
        <div class="flex flex-col">
            <h1 class="text-xl font-semibold mb-0.5 heavy">Advent Calendar</h1>
            <p class="text-gray-400 text-md">Celebrate the season with daily rewards until Dec 25! The positions are randomized like an actual advent calendar, you'll need to find today's one below.</p>
        </div>

        <!-- Breadcrumbs -->
        <nav aria-label="Breadcrumb" class="inline-flex py-2 px-4 rounded-xl bg-white/5 transition-colors duration-200">
            <ol role="list" class="flex items-center space-x-2">
                <li>
                    <a href="/" class="text-sm flex items-center gap-2 text-zinc-400 hover:text-zinc-200 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="size-4">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                        </svg>
                        <span>Home</span>
                    </a>
                </li>
                <li class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="size-4 text-zinc-400">
                        <polyline points="9 18 15 12 9 6"></polyline>
                    </svg>
                </li>
                <li>
                    <span class="text-sm text-white/80">Advent Calendar</span>
                </li>
            </ol>
        </nav>
    </div>

    <div class="relative overflow-hidden mt-4 rounded-2xl mb-8 bg-gradient-to-br from-blue-600/20 to-blue-900/30 border border-blue-500/20">
        <!-- Frosted Glass Effect Container -->
        <div class="relative backdrop-blur-sm p-8 md:p-12">
            <div class="flex flex-col md:flex-row items-center justify-between gap-8">
                <!-- Text Content -->
                <div class="max-w-2xl">
                    <h2 class="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-blue-100 to-blue-300 bg-clip-text text-transparent">
                        <%= settings.name %> Advent Calendar
                    </h2>
                    <p class="text-lg text-blue-100/90 mb-6">
                        Free daily rewards until December 25th! Unlock special prizes including a free VPS, domains, resources, <%= settings.website.currency %>, Discord Nitro, and more. Your chance of getting a special prize increases with each day you claim!
                    </p>
                    <a href="<%= settings.website.discord %>" 
                       class="inline-flex items-center px-6 py-3 rounded-xl bg-blue-200/20 backdrop-blur-xl hover:bg-blue-200/30 text-white font-medium transition-all duration-200 group">
                        Got a special prize? Claim via our Discord
                        <svg xmlns="http://www.w3.org/2000/svg" 
                             class="size-5 ml-2 transform group-hover:translate-x-1 transition-transform" 
                             viewBox="0 0 24 24" 
                             fill="none" 
                             stroke="currentColor" 
                             stroke-width="2">
                            <path d="M5 12h14M12 5l7 7-7 7"/>
                        </svg>
                    </a>
                </div>

                <!-- Decorative Ice Crystal -->
                <div class="relative w-48 h-48 flex-shrink-0 animate-float">
                    <svg viewBox="0 0 100 100" class="w-full h-full text-blue-200/30">
                        <path d="M50 0 L60 40 L100 50 L60 60 L50 100 L40 60 L0 50 L40 40 Z" 
                              fill="currentColor" 
                              class="filter backdrop-blur-sm"/>
                    </svg>
                </div>
            </div>
        </div>

        <!-- Ice Border Effect -->
        <div class="absolute inset-x-0 bottom-0 h-1 bg-gradient-to-r from-transparent via-blue-300/50 to-transparent"></div>
    </div>


    <!-- Main Content -->
    <div x-data="adventCalendar()" x-init="initialize()" class="mt-8">
        <!-- Status Banner -->
        <div x-show="showBanner" x-transition.duration.300ms class="mb-6">
            <template x-if="bannerType === 'success'">
                <div class="bg-green-500/10 border border-green-500/20 rounded-xl p-4 flex items-center justify-between">
                    <div class="flex items-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-5 text-green-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M20 6L9 17l-5-5"/>
                        </svg>
                        <p class="text-green-400" x-text="bannerMessage"></p>
                    </div>
                    <button @click="showBanner = false" class="text-green-400 hover:text-green-300 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M18 6L6 18M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            </template>
            <template x-if="bannerType === 'error'">
                <div class="bg-red-500/10 border border-red-500/20 rounded-xl p-4 flex items-center justify-between">
                    <div class="flex items-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-5 text-red-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="M15 9l-6 6M9 9l6 6"/>
                        </svg>
                        <p class="text-red-400" x-text="bannerMessage"></p>
                    </div>
                    <button @click="showBanner = false" class="text-red-400 hover:text-red-300 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M18 6L6 18M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            </template>
        </div>

        <!-- Calendar Grid -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
    <template x-for="day in calendarData" :key="day.position">
        <div 
            class="relative group"
            :class="{'opacity-50': !day.available && !day.claimed}"
        >
                <div 
                    class="relative group"
                    :class="{'opacity-50': !day.available && !day.claimed}"
                >
                    <div
                        class="bg-white/5 rounded-xl p-6 text-center transition-all duration-300 hover:bg-white/10"
                        :class="{
                            'cursor-pointer': day.available && !day.claimed,
                            'ring-2 ring-indigo-500/50': day.claimed
                        }"
                        @click="claimDay(day)"
                    >
                        <!-- Day Number -->
                        <div class="text-2xl font-bold mb-2" x-text="'#' + day.day"></div>
                        
                        <!-- Date -->
                        <div class="text-sm text-gray-400 mb-3" x-text="formatDate(day.date)"></div>

                        <!-- Status Icons -->
                        <div class="flex justify-center items-center h-12">
                            <!-- Claimed Check -->
                            <template x-if="day.claimed">
                                <div class="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="size-8 text-green-400 mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M20 6L9 17l-5-5"/>
                                    </svg>
                                    <span class="text-xs text-green-400">Claimed</span>
                                </div>
                            </template>
                            
                            <!-- Available -->
                            <template x-if="day.available && !day.claimed">
                                <div class="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="size-8 text-indigo-400 mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M20 12V8H4v4M4 12v4h16v-4M12 12v4M12 8v4M8 12h8"/>
                                    </svg>
                                    <span class="text-xs text-indigo-400">Available</span>
                                </div>
                            </template>
                            
                            <!-- Locked -->
                            <template x-if="!day.available && !day.claimed">
                                <div class="flex flex-col items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="size-8 text-gray-400 mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                                        <path d="M7 11V7a5 5 0 0110 0v4"/>
                                    </svg>
                                    <span class="text-xs text-gray-400">Locked</span>
                                </div>
                            </template>
                        </div>

                        <!-- Reward Info (if claimed) -->
                        <template x-if="day.claimed && day.reward">
                            <div class="mt-3 pt-3 border-t border-white/10">
                                <template x-if="day.reward.isSpecial">
                                    <div class="text-purple-400 font-medium">
                                        <span x-text="formatSpecialReward(day.reward.special)"></span>
                                        <div class="text-xs mt-1">Open a ticket in <a href="<%= settings.website.discord %>" class="text-purple-300 hover:text-purple-200 transition-colors"><%= settings.website.discord %></a> to claim</div>
                                    </div>
                                </template>
                                <template x-if="!day.reward.isSpecial">
                                    <div class="text-indigo-400 font-medium">
                                        <span x-text="formatReward(day.reward)"></span>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>

                    <!-- Hover Effect for Available Days -->
                    <div
                        x-show="day.available && !day.claimed"
                        class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
                    >
                        <div class="absolute inset-0 bg-gradient-to-b from-indigo-500/20 to-transparent rounded-xl"></div>
                    </div>
                </div>
            </template>
        </div>

        <!-- Special Rewards Modal -->
        <div
            x-show="showModal"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 transform scale-95"
            x-transition:enter-end="opacity-100 transform scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 transform scale-100"
            x-transition:leave-end="opacity-0 transform scale-95"
            class="fixed inset-0 z-50 overflow-y-auto"
            style="display: none;"
        >
            <div class="flex items-center justify-center min-h-screen px-4">
                <div class="fixed inset-0 bg-black/50 transition-opacity" @click="showModal = false"></div>
                
                <div class="relative bg-[#1a1b1e] rounded-2xl max-w-md w-full p-6">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-xl font-semibold">🎉 Special Reward!</h3>
                        <button @click="showModal = false" class="text-gray-400 hover:text-white transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    
                    <p class="text-gray-300 mb-4" x-text="modalMessage"></p>
                    
                    <div class="bg-purple-500/10 border border-purple-500/20 rounded-xl p-4 mb-6">
                        <p class="text-purple-400 text-sm">To claim your special reward, please open a ticket in our Discord server at <a href="<%= settings.website.discord %>" class="font-medium hover:text-purple-300 transition-colors"><%= settings.website.discord %></a></p>
                    </div>

                    <div class="flex justify-end">
                        <button
                            @click="showModal = false"
                            class="px-4 py-2 bg-indigo-500 text-white rounded-xl hover:bg-indigo-600 transition-colors"
                        >
                            Got it!
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
function adventCalendar() {
    return {
        calendarData: [],
        showBanner: false,
        bannerType: '',
        bannerMessage: '',
        showModal: false,
        modalMessage: '',
        isLoading: false,

        async initialize() {
            await this.fetchCalendar();
            this.randomizePositions();
            // Refresh calendar every minute
            setInterval(() => this.fetchCalendar(), 60000);
        },

        async fetchCalendar() {
            try {
                const response = await fetch('/api/advent/calendar');
                if (!response.ok) throw new Error('Failed to fetch calendar');
                const data = await response.json();
                this.calendarData = data.calendar;
                this.randomizePositions();
            } catch (error) {
                console.error('Failed to fetch calendar:', error);
                this.showError('Failed to load calendar data');
            }
        },

        getPositions() {
            // Try to get positions from cookie
            const savedPositions = this.getCookie('adventPositions');
            if (savedPositions) {
                try {
                    return JSON.parse(savedPositions);
                } catch (e) {
                    console.error('Failed to parse saved positions:', e);
                }
            }
            return null;
        },

        randomizePositions() {
            // Check for existing positions
            const savedPositions = this.getPositions();
            if (savedPositions && savedPositions.length === this.calendarData.length) {
                // Apply saved positions
                this.calendarData = this.calendarData.map((day, i) => ({
                    ...day,
                    position: savedPositions[i]
                }));
            } else {
                // Generate new random positions
                const positions = Array.from({ length: this.calendarData.length }, (_, i) => i);
                for (let i = positions.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [positions[i], positions[j]] = [positions[j], positions[i]];
                }

                // Apply new positions
                this.calendarData = this.calendarData.map((day, i) => ({
                    ...day,
                    position: positions[i]
                }));

                // Save to cookie (expires after Christmas)
                this.setCookie('adventPositions', JSON.stringify(positions), new Date('2024-12-26'));
            }

            // Sort by position for display
            this.calendarData.sort((a, b) => a.position - b.position);
        },

        setCookie(name, value, expires) {
            const cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/; SameSite=Strict`;
            document.cookie = cookie;
        },

        getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        },

        async claimDay(day) {
            if (!day.available || day.claimed || this.isLoading) return;
            
            this.isLoading = true;
            try {
                const response = await fetch(`/api/advent/claim/${day.day}`, {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Failed to claim reward');
                
                const data = await response.json();
                
                if (data.reward.isSpecial) {
                    this.modalMessage = `Congratulations! You've won ${this.formatSpecialReward(data.reward.special)}!`;
                    this.showModal = true;
                }

                this.showSuccess(`Successfully claimed reward for Day ${day.day}!`);
                await this.fetchCalendar();
            } catch (error) {
                console.error('Failed to claim reward:', error);
                this.showError('Failed to claim reward. Please try again.');
            } finally {
                this.isLoading = false;
            }
        },

        formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                month: 'short',
                day: 'numeric'
            });
        },

        formatReward(reward) {
            if (!reward) return '';

            switch (reward.type) {
                case 'currency':
                    return `${reward.value} <%= settings.website.currency %>`;
                case 'ram':
                    return `${reward.value}MiB RAM`;
                case 'disk':
                    return `${reward.value}MiB Disk`;
                case 'cpu':
                    return `${reward.value}% CPU`;
                case 'servers':
return `${reward.value} Server Slots`;
                default:
                    return 'Unknown Reward';
            }
        },

        formatSpecialReward(special) {
            const rewards = {
                'discord_nitro_basic': 'Discord Nitro Basic',
                'discord_nitro': 'Discord Nitro',
                'visa_5': '$5 Visa Card',
                'vps_1gb': '1GB VPS',
                'vps_2gb': '2GB VPS',
                'vps_4gb': '4GB VPS',
                'vps_8gb': '8GB VPS',
                'domain_com': '.com Domain',
                'domain_couk': '.co.uk Domain'
            };
            return rewards[special] || 'Special Reward';
        },

        showSuccess(message) {
            this.bannerType = 'success';
            this.bannerMessage = message;
            this.showBanner = true;
            setTimeout(() => {
                this.showBanner = false;
            }, 5000);
        },

        showError(message) {
            this.bannerType = 'error';
            this.bannerMessage = message;
            this.showBanner = true;
            setTimeout(() => {
                this.showBanner = false;
            }, 5000);
        }
    };
}
</script>

<style>
/* Smooth scrolling behavior */
html {
    scroll-behavior: smooth;
}

/* Custom animations */
@keyframes float {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-5px);
    }
}

.animate-float {
    animation: float 3s ease-in-out infinite;
}

/* Custom transitions */
.transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}

/* Hover effects */
.hover\:shadow-glow:hover {
    box-shadow: 0 0 20px theme('colors.indigo.500' / 20%);
}

/* Loading animation */
@keyframes pulse {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
}

.animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}
</style>

<%- include('./components/bottom') %>